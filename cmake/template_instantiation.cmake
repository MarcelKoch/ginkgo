cmake_minimum_required(VERSION 3.13)
function(add_instantiation_files source_file output_files_var)
    file(READ "${source_file}" file_contents)
    string(REPLACE ";" "<semicolon>" file_contents "${file_contents}")
    string(REGEX REPLACE "[\r\n]" ";" file_contents "${file_contents}")
    set(begin_location)
    set(end_location)
    set(split_locations)
    list(LENGTH file_contents total_length)
    set(counter 0)
    foreach(line IN LISTS file_contents)
        if(line MATCHES "// begin")
            set(begin_location ${counter})
        elseif(line MATCHES "// split")
            list(APPEND split_locations ${counter})
        elseif(line MATCHES "// end")
            set(end_location ${counter})
        endif()
        math(EXPR counter "${counter} + 1")
    endforeach()
    if (NOT (begin_location AND end_location AND split_locations))
        message(FATAL_ERROR "Nothing to split")
    endif()
    if (begin_location GREATER_EQUAL end_location)
        message(FATAL_ERROR "Incorrect begin/end order")
    endif()
    set(range_begins ${begin_location} ${split_locations})
    set(range_ends ${split_locations} ${end_location})
    list(LENGTH begin_locations range_count)
    list(LENGTH split_locations range_count_minus_one)
    math(EXPR length_header "${begin_location}")
    math(EXPR end_location_past "${end_location} + 1")
    math(EXPR length_footer "${total_length} - ${end_location_past}")
    list(SUBLIST file_contents 0 ${length_header} header)
    list(SUBLIST file_contents ${end_location_past} ${length_footer} footer)
    set(output_files)
    foreach(range RANGE 0 ${range_count_minus_one})
        set(filename "${source_file}.${range}.cpp")
        list(APPEND output_files "${filename}")
        list(GET range_begins ${range} begin)
        list(GET range_ends ${range} end)
        math(EXPR begin "${begin} + 1")
        math(EXPR length "${end} - ${begin}")
        list(SUBLIST file_contents ${begin} ${length} content)
        string(REPLACE ";" "\n" content "${header};${content};${footer}")
        string(REPLACE "<semicolon>" ";" content "${content}")
        # create a .tmp file, but only copy it over if source file changed
        # this way, we don't rebuild unnecessarily
        file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/${filename}.tmp" "${content}")
        add_custom_command(
            OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${filename}"
            COMMAND ${CMAKE_COMMAND}
            -E copy "${CMAKE_CURRENT_BINARY_DIR}/${filename}.tmp"
                    "${CMAKE_CURRENT_BINARY_DIR}/${filename}"
            MAIN_DEPENDENCY "${source_file}")
    endforeach()
    # lazy workaround to make cmake generation depend on the source file
    configure_file("${source_file}", "${source_file}.tmp" COPYONLY)
    set(${output_files_var} ${output_files} PARENT_SCOPE)
endfunction()

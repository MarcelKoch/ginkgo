/*******************************<GINKGO LICENSE>******************************
Copyright (c) 2017-2023, the Ginkgo authors
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
******************************<GINKGO LICENSE>*******************************/

#ifndef GKO_PUBLIC_CORE_BASE_TIMER_HPP_
#define GKO_PUBLIC_CORE_BASE_TIMER_HPP_

#include <ginkgo/core/base/executor.hpp>


namespace gko {


/**
 * An opaque wrapper for a time point generated by a timer.
 */
class time_point {
public:
    ~time_point();

    time_point(time_point&&);

    time_point& operator=(time_point&&);

    time_point(const time_point&) = delete;

    time_point& operator=(const time_point&) = delete;

private:
    friend class Timer;
    friend class CpuTimer;
    friend class CudaTimer;
    friend class HipTimer;
    friend class DpcppTimer;

    /** What kind of timer was used to generate the time point? */
    enum class type {
        /** std::chrono-based timer */
        cpu,
        /** cudaEvent-based timer */
        cuda,
        /** hipEvent-based timer */
        hip,
        /** sycl::event-based timer */
        dpcpp,
    };

    time_point();

    type type_;
    union {
        CUevent_st* cuda_event;
        GKO_HIP_EVENT_STRUCT* hip_event;
        sycl::event* dpcpp_event;
        std::chrono::steady_clock::time_point chrono;
    } data_;
};


class Timer {
public:
    /**
     * Returns a time point recorded now.
     */
    virtual time_point record() = 0;

    /**
     * Computes the difference between the two time points.
     * @param start  the first time point (earlier)
     * @param end  the second time point (later)
     * @return the difference between the time points in nanoseconds.
     */
    virtual int64 difference(const time_point& start,
                             const time_point& stop) = 0;

    static std::unique_ptr<Timer> create_for_executor(
        std::shared_ptr<const Executor> exec);
};


class CpuTimer : public Timer {
public:
    time_point record() override;

    int64 difference(const time_point& start, const time_point& stop) override;
};


class CudaTimer : public Timer {
public:
    time_point record() override;

    int64 difference(const time_point& start, const time_point& stop) override;

    CudaTimer(std::shared_ptr<const CudaExecutor> exec);

private:
    std::shared_ptr<const CudaExecutor> exec_;
};


class HipTimer : public Timer {
public:
    time_point record() override;

    int64 difference(const time_point& start, const time_point& stop) override;

    HipTimer(std::shared_ptr<const HipExecutor> exec);

private:
    std::shared_ptr<const HipExecutor> exec_;
};


class DpcppTimer : public Timer {
public:
    time_point record() override;

    int64 difference(const time_point& start, const time_point& stop) override;

    DpcppTimer(std::shared_ptr<const DpcppExecutor> exec);

private:
    std::shared_ptr<const DpcppExecutor> exec_;
};


}  // namespace gko


#endif  // GKO_PUBLIC_CORE_BASE_TIMER_HPP_
